{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Django UK Geo Utils A django app for geocoding with postcodes or UPRNs django-uk-geo-utils provides a set models, management commands and helpers for working with OS AddressBase and ONS UPRN Directory ONS Postcode Directory to simplify the proces of mapping postcodes or UPRNs to grid references and a range of administrative, electoral, and statistical geographies in your django/PostGIS project.","title":"Home"},{"location":"#django-uk-geo-utils","text":"A django app for geocoding with postcodes or UPRNs django-uk-geo-utils provides a set models, management commands and helpers for working with OS AddressBase and ONS UPRN Directory ONS Postcode Directory to simplify the proces of mapping postcodes or UPRNs to grid references and a range of administrative, electoral, and statistical geographies in your django/PostGIS project.","title":"Django UK Geo Utils"},{"location":"extending/","text":"Extending the models The uk_geo_utils.models.Address , uk_geo_utils.models.Onsud and uk_geo_utils.models.Onspd models each inherit from an abstract base class ( uk_geo_utils.models.AbstractAddress , uk_geo_utils.models.AbstractOnsud and uk_geo_utils.models.AbstractOnspd , respectively) This allows you to use model inheritance to extend these models in your project (for example, if you need to add additional fields). This offers better performance then using one-to-one relationships on large tables like this that contain millions of rows. If you extend the base tables, declare keys to your project settings file with your extended model names: ADDRESS_MODEL = 'myapp.MyModel' ONSUD_MODEL = 'myapp.MyModel' ONSPD_MODEL = 'myapp.MyModel' This will allow the uk_geo_utils management commands, helpers, etc to operate on your extended tables.","title":"Extending the models"},{"location":"extending/#extending-the-models","text":"The uk_geo_utils.models.Address , uk_geo_utils.models.Onsud and uk_geo_utils.models.Onspd models each inherit from an abstract base class ( uk_geo_utils.models.AbstractAddress , uk_geo_utils.models.AbstractOnsud and uk_geo_utils.models.AbstractOnspd , respectively) This allows you to use model inheritance to extend these models in your project (for example, if you need to add additional fields). This offers better performance then using one-to-one relationships on large tables like this that contain millions of rows. If you extend the base tables, declare keys to your project settings file with your extended model names: ADDRESS_MODEL = 'myapp.MyModel' ONSUD_MODEL = 'myapp.MyModel' ONSPD_MODEL = 'myapp.MyModel' This will allow the uk_geo_utils management commands, helpers, etc to operate on your extended tables.","title":"Extending the models"},{"location":"geocoders/","text":"Geocoders uk_geo_utils.geocoders.AddressBaseGeocoder and uk_geo_utils.geocoders.OnspdGeocoder provide abstractions for obtaining a grid reference or ONS code based on a postcode or UPRN. Points AddressBaseGeocoder and OnspdGeocoder support a (postcode) centroid property. Additionally AddressBaseGeocoder supports an additional get_point(self, uprn) method. Examples: >>> from uk_geo_utils.geocoders import AddressBaseGeocoder >>> g = AddressBaseGeocoder('SA8 4DA') >>> g.centroid <Point object at 0x000000000000> >>> g.get_point(\"10010020128\") <Point object at 0x000000000000> >>> from uk_geo_utils.geocoders import OnspdGeocoder >>> g = OnspdGeocoder('SA8 4DA') >>> g.centroid <Point object at 0x000000000000> Geocoder objects may be constructed with a string or a Postcode object . In either case, whitespace and formatting is ignored: >>> from uk_geo_utils.geocoders import OnspdGeocoder >>> from uk_geo_utils.helpers import Postcode >>> g1 = OnspdGeocoder(Postcode('SA8 4DA')) >>> g2 = OnspdGeocoder('sa 8 4 DA') >>> g1.centroid == g2.centroid True UPRNs AddressBaseGeocoder supports a uprns property. Example: >>> from uk_geo_utils.geocoders import AddressBaseGeocoder >>> g = AddressBaseGeocoder('SA8 4DA') >>> g.uprns ['10010020128', '10010020129', '100100624432', '100100624433', '100100624434', '100100624435', '100100624436', '100100624437', '100100624438', '100100624439'] Addresses AddressBaseGeocoder supports an addresses property, returning a list of Address objects. Example: >>> from uk_geo_utils.geocoders import AddressBaseGeocoder >>> g = AddressBaseGeocoder('SA8 4DA') >>> g.addresses [<Address: Address object>, <Address: Address object>, <Address: Address object>, <Address: Address object>, <Address: Address object>, <Address: Address object>, <Address: Address object>, <Address: Address object>, <Address: Address object>, <Address: Address object>] ONS Codes AddressBaseGeocoder and OnspdGeocoder support a get_code() method which can be used to access fields or aliases on the ONSPD and ONSUD models based on a postcode or UPRN query. AddressBaseGeocoder.get_code(self, code_type, uprn=None, strict=False) OnspdGeocoder.get_code(self, code_type) Examples: >>> from uk_geo_utils.geocoders import AddressBaseGeocoder >>> g = AddressBaseGeocoder('SA8 4DA') >>> g.get_code('ctry') 'W92000004' >>> g.get_code('ctry', \"10010020128\") 'W92000004' >>> g.get_code('ctry', \"100100624439\") 'W92000004' >>> from uk_geo_utils.geocoders import AddressBaseGeocoder >>> g = AddressBaseGeocoder('SA8 4DA') >>> g.get_code('lad') uk_geo_utils.geocoders.MultipleCodesException: Postcode SA84DA covers UPRNs in more than one 'lad' area >>> g.get_code('lad', \"10010020128\") 'W06000011' >>> g.get_code('lad', \"100100624439\") 'W06000012' >>> g.get_code('lad', \"spoons\") addressbase.models.DoesNotExist >>> from uk_geo_utils.geocoders import OnspdGeocoder >>> g = OnspdGeocoder('SA8 4DA') >>> g.get_code('ctry') 'W92000004' >>> g.get_code('lad') 'W06000012' Exceptions CodesNotFoundException Raised by AddressBaseGeocoder.get_code() if no records in the ONSUD are found correspoding to a record in AddressBase. Extends uk_geo_utils.geocoders.AddressBaseException . MultipleCodesException Raised by AddressBaseGeocoder.get_code() if a single code of the given type can not be assigned to all of the UPRNs described by a postcode. Extends uk_geo_utils.geocoders.AddressBaseException . NorthernIrelandException Raised by AddressBaseGeocoder.__init__() when attempting to construct an AddressBaseGeocoder object with a postcode starting 'BT'. AddressBase does not cover Northern Ireland. Extends django.core.exceptions.ObjectDoesNotExist AddressBaseNotImportedException Raised by AddressBaseGeocoder.__init__() when attempting to construct an AddressBaseGeocoder object if there are no records in the AddressBase table. Extends django.core.exceptions.ObjectDoesNotExist OnsudNotImportedException Raised by AddressBaseGeocoder.__init__() when attempting to construct an AddressBaseGeocoder object if there are no records in the Onsud table. Extends django.core.exceptions.ObjectDoesNotExist OnspdNotImportedException Raised by OnspdGeocoder.__init__() when attempting to construct an OnspdGeocoder object if there are no records in the Onspd table. Extends django.core.exceptions.ObjectDoesNotExist","title":"Geocoders"},{"location":"geocoders/#geocoders","text":"uk_geo_utils.geocoders.AddressBaseGeocoder and uk_geo_utils.geocoders.OnspdGeocoder provide abstractions for obtaining a grid reference or ONS code based on a postcode or UPRN.","title":"Geocoders"},{"location":"geocoders/#points","text":"AddressBaseGeocoder and OnspdGeocoder support a (postcode) centroid property. Additionally AddressBaseGeocoder supports an additional get_point(self, uprn) method. Examples: >>> from uk_geo_utils.geocoders import AddressBaseGeocoder >>> g = AddressBaseGeocoder('SA8 4DA') >>> g.centroid <Point object at 0x000000000000> >>> g.get_point(\"10010020128\") <Point object at 0x000000000000> >>> from uk_geo_utils.geocoders import OnspdGeocoder >>> g = OnspdGeocoder('SA8 4DA') >>> g.centroid <Point object at 0x000000000000> Geocoder objects may be constructed with a string or a Postcode object . In either case, whitespace and formatting is ignored: >>> from uk_geo_utils.geocoders import OnspdGeocoder >>> from uk_geo_utils.helpers import Postcode >>> g1 = OnspdGeocoder(Postcode('SA8 4DA')) >>> g2 = OnspdGeocoder('sa 8 4 DA') >>> g1.centroid == g2.centroid True","title":"Points"},{"location":"geocoders/#uprns","text":"AddressBaseGeocoder supports a uprns property. Example: >>> from uk_geo_utils.geocoders import AddressBaseGeocoder >>> g = AddressBaseGeocoder('SA8 4DA') >>> g.uprns ['10010020128', '10010020129', '100100624432', '100100624433', '100100624434', '100100624435', '100100624436', '100100624437', '100100624438', '100100624439']","title":"UPRNs"},{"location":"geocoders/#addresses","text":"AddressBaseGeocoder supports an addresses property, returning a list of Address objects. Example: >>> from uk_geo_utils.geocoders import AddressBaseGeocoder >>> g = AddressBaseGeocoder('SA8 4DA') >>> g.addresses [<Address: Address object>, <Address: Address object>, <Address: Address object>, <Address: Address object>, <Address: Address object>, <Address: Address object>, <Address: Address object>, <Address: Address object>, <Address: Address object>, <Address: Address object>]","title":"Addresses"},{"location":"geocoders/#ons-codes","text":"AddressBaseGeocoder and OnspdGeocoder support a get_code() method which can be used to access fields or aliases on the ONSPD and ONSUD models based on a postcode or UPRN query. AddressBaseGeocoder.get_code(self, code_type, uprn=None, strict=False) OnspdGeocoder.get_code(self, code_type) Examples: >>> from uk_geo_utils.geocoders import AddressBaseGeocoder >>> g = AddressBaseGeocoder('SA8 4DA') >>> g.get_code('ctry') 'W92000004' >>> g.get_code('ctry', \"10010020128\") 'W92000004' >>> g.get_code('ctry', \"100100624439\") 'W92000004' >>> from uk_geo_utils.geocoders import AddressBaseGeocoder >>> g = AddressBaseGeocoder('SA8 4DA') >>> g.get_code('lad') uk_geo_utils.geocoders.MultipleCodesException: Postcode SA84DA covers UPRNs in more than one 'lad' area >>> g.get_code('lad', \"10010020128\") 'W06000011' >>> g.get_code('lad', \"100100624439\") 'W06000012' >>> g.get_code('lad', \"spoons\") addressbase.models.DoesNotExist >>> from uk_geo_utils.geocoders import OnspdGeocoder >>> g = OnspdGeocoder('SA8 4DA') >>> g.get_code('ctry') 'W92000004' >>> g.get_code('lad') 'W06000012'","title":"ONS Codes"},{"location":"geocoders/#exceptions","text":"","title":"Exceptions"},{"location":"geocoders/#codesnotfoundexception","text":"Raised by AddressBaseGeocoder.get_code() if no records in the ONSUD are found correspoding to a record in AddressBase. Extends uk_geo_utils.geocoders.AddressBaseException .","title":"CodesNotFoundException"},{"location":"geocoders/#multiplecodesexception","text":"Raised by AddressBaseGeocoder.get_code() if a single code of the given type can not be assigned to all of the UPRNs described by a postcode. Extends uk_geo_utils.geocoders.AddressBaseException .","title":"MultipleCodesException"},{"location":"geocoders/#northernirelandexception","text":"Raised by AddressBaseGeocoder.__init__() when attempting to construct an AddressBaseGeocoder object with a postcode starting 'BT'. AddressBase does not cover Northern Ireland. Extends django.core.exceptions.ObjectDoesNotExist","title":"NorthernIrelandException"},{"location":"geocoders/#addressbasenotimportedexception","text":"Raised by AddressBaseGeocoder.__init__() when attempting to construct an AddressBaseGeocoder object if there are no records in the AddressBase table. Extends django.core.exceptions.ObjectDoesNotExist","title":"AddressBaseNotImportedException"},{"location":"geocoders/#onsudnotimportedexception","text":"Raised by AddressBaseGeocoder.__init__() when attempting to construct an AddressBaseGeocoder object if there are no records in the Onsud table. Extends django.core.exceptions.ObjectDoesNotExist","title":"OnsudNotImportedException"},{"location":"geocoders/#onspdnotimportedexception","text":"Raised by OnspdGeocoder.__init__() when attempting to construct an OnspdGeocoder object if there are no records in the Onspd table. Extends django.core.exceptions.ObjectDoesNotExist","title":"OnspdNotImportedException"},{"location":"importing_data/","text":"Importing Data django-uk-geo-utils is most useful for users of AddressBase. Unfortunately AddressBase is proprietary data so it isn't accessible to everyone. If you have a licence for AddressBase or access via the PSMA , import AddressBase Standard, ONSUD and ONSPD. If you don't have access to AddressBase, skip straight to ONSPD. You don't need ONSUD. AddressBase Ordnance Survey AddressBase contains UPRNs (Unique Property Reference Number), addresses, and grid references for UK properties. Order a copy of AddressBase and download from the Ordnance Survey website/FTP. The import is done in 2 stages: First we need to do some pre-processing on the data. For AddressBase Standard: python manage.py clean_addressbase_standard /path/to/data For AddressBase Plus: python manage.py clean_addressbase_plus /path/to/data Then the processed files can be imported: python manage.py import_cleaned_addresses /path/to/data ONSUD ONS UPRN Directory is the companion dataset to AddressBase and handles mapping UPRNs to a variety of administrative, electoral, and statistical geographies. Grab the latest release from the Office for National Statistics , extract and import it: python manage.py import_onsud /path/to/data ONSPD ONS Postcode Directory maps postcodes to grid references and a variety of administrative, electoral, and statistical geographies. Grab the latest release from the Office for National Statistics , extract and import it: python manage.py import_onspd /path/to/data","title":"Importing Data"},{"location":"importing_data/#importing-data","text":"django-uk-geo-utils is most useful for users of AddressBase. Unfortunately AddressBase is proprietary data so it isn't accessible to everyone. If you have a licence for AddressBase or access via the PSMA , import AddressBase Standard, ONSUD and ONSPD. If you don't have access to AddressBase, skip straight to ONSPD. You don't need ONSUD.","title":"Importing Data"},{"location":"importing_data/#addressbase","text":"Ordnance Survey AddressBase contains UPRNs (Unique Property Reference Number), addresses, and grid references for UK properties. Order a copy of AddressBase and download from the Ordnance Survey website/FTP. The import is done in 2 stages: First we need to do some pre-processing on the data. For AddressBase Standard: python manage.py clean_addressbase_standard /path/to/data For AddressBase Plus: python manage.py clean_addressbase_plus /path/to/data Then the processed files can be imported: python manage.py import_cleaned_addresses /path/to/data","title":"AddressBase"},{"location":"importing_data/#onsud","text":"ONS UPRN Directory is the companion dataset to AddressBase and handles mapping UPRNs to a variety of administrative, electoral, and statistical geographies. Grab the latest release from the Office for National Statistics , extract and import it: python manage.py import_onsud /path/to/data","title":"ONSUD"},{"location":"importing_data/#onspd","text":"ONS Postcode Directory maps postcodes to grid references and a variety of administrative, electoral, and statistical geographies. Grab the latest release from the Office for National Statistics , extract and import it: python manage.py import_onspd /path/to/data","title":"ONSPD"},{"location":"installation/","text":"Installation Requirements Python 3 Django >= 1.11 PostgreSQL, PostGIS Installation pip install uk-geo-utils Add to INSTALLED_APPS in django settings: INSTALLED_APPS = [ ... 'uk_geo_utils', ] Apply migrations: python manage.py migrate","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#requirements","text":"Python 3 Django >= 1.11 PostgreSQL, PostGIS","title":"Requirements"},{"location":"installation/#installation_1","text":"pip install uk-geo-utils Add to INSTALLED_APPS in django settings: INSTALLED_APPS = [ ... 'uk_geo_utils', ] Apply migrations: python manage.py migrate","title":"Installation"},{"location":"licence/","text":"Licensing django-uk-geo-utils is made available under the MIT licence Your use of Ordnance Survey data should comply with the terms of your licence or mapping agreement . Your use of ONS data should comply with ONS geography licences","title":"Licensing"},{"location":"licence/#licensing","text":"django-uk-geo-utils is made available under the MIT licence Your use of Ordnance Survey data should comply with the terms of your licence or mapping agreement . Your use of ONS data should comply with ONS geography licences","title":"Licensing"},{"location":"models/","text":"Model Fields and Aliases Fields ONSUD The ONSUD model provides a django model field for each field in the ONSUD. See the ONSUD release notes for the description of each field. ONSPD The ONSPD model provides a django model field for each field in the ONSPD. See the ONSPD release notes for the description of each field. Aliases Where comparable fields exist in the ONSUD and ONSPD with different names, there are some convenience aliases defined on the models. This allows us to reference comparable columns using a consistent name across models. The following field names may be used interchangably and called on either model: ONSPD ONSUD oscty cty oslaua lad osward ward oshlthau hlthau ru11ind ruc11","title":"Model Fields and Aliases"},{"location":"models/#model-fields-and-aliases","text":"","title":"Model Fields and Aliases"},{"location":"models/#fields","text":"","title":"Fields"},{"location":"models/#onsud","text":"The ONSUD model provides a django model field for each field in the ONSUD. See the ONSUD release notes for the description of each field.","title":"ONSUD"},{"location":"models/#onspd","text":"The ONSPD model provides a django model field for each field in the ONSPD. See the ONSPD release notes for the description of each field.","title":"ONSPD"},{"location":"models/#aliases","text":"Where comparable fields exist in the ONSUD and ONSPD with different names, there are some convenience aliases defined on the models. This allows us to reference comparable columns using a consistent name across models. The following field names may be used interchangably and called on either model: ONSPD ONSUD oscty cty oslaua lad osward ward oshlthau hlthau ru11ind ruc11","title":"Aliases"},{"location":"postcode/","text":"Postcode An abstraction over a UK postcode. Formatting >>> from uk_geo_utils.helpers import Postcode >>> p = Postcode('sw1a1aa') >>> p.with_space 'SW1A 1AA' >>> p.without_space 'SW1A1AA' Comparison >>> from uk_geo_utils.helpers import Postcode >>> Postcode('SW1A 1AA') == Postcode('sw 1a1 Aa') True Validation >>> from uk_geo_utils.helpers import Postcode >>> p = Postcode('foo') >>> p = Postcode('foo', validate=True) ValueError: Postcode must have at least 5 characters","title":"Postcode"},{"location":"postcode/#postcode","text":"An abstraction over a UK postcode.","title":"Postcode"},{"location":"postcode/#formatting","text":">>> from uk_geo_utils.helpers import Postcode >>> p = Postcode('sw1a1aa') >>> p.with_space 'SW1A 1AA' >>> p.without_space 'SW1A1AA'","title":"Formatting"},{"location":"postcode/#comparison","text":">>> from uk_geo_utils.helpers import Postcode >>> Postcode('SW1A 1AA') == Postcode('sw 1a1 Aa') True","title":"Comparison"},{"location":"postcode/#validation","text":">>> from uk_geo_utils.helpers import Postcode >>> p = Postcode('foo') >>> p = Postcode('foo', validate=True) ValueError: Postcode must have at least 5 characters","title":"Validation"}]}